"use strict";var k=Object.create;var m=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var U=Object.getPrototypeOf,R=Object.prototype.hasOwnProperty;var A=(r,t,s,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of z(t))!R.call(r,o)&&o!==s&&m(r,o,{get:()=>t[o],enumerable:!(e=v(t,o))||e.enumerable});return r};var w=(r,t,s)=>(s=r!=null?k(U(r)):{},A(t||!r||!r.__esModule?m(s,"default",{value:r,enumerable:!0}):s,r));var f=w(require("path"));var a=w(require("fs")),u=require("child_process");async function h(r,t){let s=await fetch(r).then(e=>e.arrayBuffer());a.writeFileSync(t,Buffer.from(s))}function g(r,t){a.existsSync(t)||a.mkdirSync(t,{recursive:!0});let s=[{ext:[".zip"],cmd:`unzip -o "${r}" -d "${t}"`},{ext:[".tar"],cmd:`tar -xf "${r}" -C "${t}"`},{ext:[".tar.gz",".tgz"],cmd:`tar -xzf "${r}" -C "${t}"`},{ext:[".tar.bz2"],cmd:`tar -xjf "${r}" -C "${t}"`},{ext:[".7z"],cmd:`7z x "${r}" -o"${t}"`},{ext:[".rar"],cmd:`unrar x "${r}" "${t}"`},{ext:[".rar"],cmd:`unrar x "${r}" "${t}"`}];for(let{ext:e,cmd:o}of s)for(let n of e)if(r.endsWith(n))return(0,u.execSync)(o);console.error(`Error: Unsupported file type: ${r}`)}function $(r,t=process.platform,s=process.arch){let e;switch(s){case"arm64":e="aarch64";break;case"x64":e="x86_64";break;default:throw new Error(`Unsupported architechture ${process.arch}.`)}let o;switch(t){case"linux":o=["unknown-linux-gnu"];break;case"darwin":o=["apple-darwin"];break;case"win32":o=["pc-windows-msvc","pc-windows-gnu"];break;default:throw new Error(`Unsupported platform ${t}.`)}return o.map(n=>`${r}-${e}-${n}`)}var c=class{name;owner;constructor(t){let s=/https:\/\/github\.com\/([^\/]+)\/([^\/]+)/,e=t.match(s);if(!e)throw new Error("Invalid github repo url");this.owner=e[1],this.name=e[2]}getReleasesApiUrl(t="latest"){return t==="latest"?`https://api.github.com/repos/${this.owner}/${this.name}/releases/latest`:`https://api.github.com/repos/${this.owner}/${this.name}/releases/tags/${t}`}async getRelease(t="latest"){let s=this.getReleasesApiUrl(t),e=await fetch(s);if(!e.ok)throw new Error(`Failed to fetch ${s}`);return await e.json()}async getAssetUrl(t=this.name,s="latest",e=process.platform,o=process.arch){let n=await this.getRelease(s),i=$(t,e,o),l=n.assets.find(y=>i.some(b=>y.name.startsWith(b)));if(!l)throw new Error(`No asset found for ${t} ${s} ${e} ${o}`);return l.browser_download_url}};var p=require("os");async function x(r){let{repo:t,version:s="latest"}=r,e=await new c(t).getAssetUrl(s),o=e.split("/").at(-1),n=f.default.join((0,p.tmpdir)(),o),i=f.default.join((0,p.homedir)(),"easy-setup");return await h(e,n),await g(n,i),{version:s,installDir:i,downloadUrl:e}}var d=process.argv[2],E=process.argv[2];d||(console.log("easy-setup <repo> [<version>]"),process.exit());x({repo:d,version:E}).then(r=>{console.log(r)});
